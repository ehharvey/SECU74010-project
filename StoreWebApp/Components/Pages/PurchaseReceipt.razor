@inject IPurchaseRepository PurchaseRepository
@inject ToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IProductRepository ProductRepository
@page "/purchase-receipt/{Id:int}"

<div class="container">
    @if (Purchase != null)
    {
        <div class="card">
            <div class="card-header">
                <h1>Purchase receipt</h1>
            </div>
            <div class="card-body">
                <p>Id: @Purchase.Id</p>
                <p>Date: @Purchase.PurchaseDate</p>
                <p>Products:</p>
                <ul>
                    @foreach (var product in Products.GroupBy(p => p.Id))
                    {
                        <li>Qty: @product.Count() | @product.FirstOrDefault().ProductDisplayName - $@((decimal)product.Sum(p => p.Price / (decimal)100.0))</li>
                    }
                </ul>
                <p>Total: $@((decimal)Total / (decimal)100)</p>
            </div>
        </div>
    }
    else
    {
        <p>Purchase not found</p>
    }
</div>



@code
{
    [Parameter] public int Id { get; set; }

    private Purchase? Purchase { get; set; }

    private List<Product>? Products { get; set; }

    int? Total;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Purchase receipt initialized");
        var purchase_temp = PurchaseRepository.GetPurchase(Id);

        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

        
        if (purchase_temp != null && purchase_temp.AccountId == user.Identity.Name)
        {
            Purchase = purchase_temp;
            Products = purchase_temp.ProductIds.Select(p => ProductRepository.GetProductById(p)).ToList();
            Total = Products.Sum(p => p.Price);
        }

        ToastService.Notify(new ToastMessage
        {
            Title = "Purchase receipt",
            Message = "Thank you for your purchase!",
            AutoHide = true,
        });
    }
}