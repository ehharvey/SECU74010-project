// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreWebApp.Components;

#nullable disable

namespace StoreWebApp.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20240416001920_zip_fix")]
    partial class zip_fix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("StoreWebApp.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ZipCode");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("StoreWebApp.Models.AgeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AgeGroupName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AgeGroups");
                });

            modelBuilder.Entity("StoreWebApp.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("StoreWebApp.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsExchangeable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReturnable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTryAndBuyEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PickupEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SocialSharingEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("StoreWebApp.Models.Colour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColourName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Colours");
                });

            modelBuilder.Entity("StoreWebApp.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("StoreWebApp.Models.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Logins");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Email = "test@example.com",
                            Password = "password"
                        });
                });

            modelBuilder.Entity("StoreWebApp.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AgeGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ArticleTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BaseColourId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BrandId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CatalogAddDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Colour1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Colour2Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DiscountedPrice")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GenderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("MasterCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductDisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PurchaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UsageId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AgeGroupId");

                    b.HasIndex("ArticleTypeId");

                    b.HasIndex("BaseColourId");

                    b.HasIndex("BrandId");

                    b.HasIndex("Colour1Id");

                    b.HasIndex("Colour2Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("MasterCategoryId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UsageId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("StoreWebApp.Models.ProductToStyleOptionJunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StyleOptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StyleOptionId");

                    b.ToTable("ProductToStyleOptionJunctions");
                });

            modelBuilder.Entity("StoreWebApp.Models.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductIds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("StoreWebApp.Models.PurchaseToProductJunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseToProductJunction");
                });

            modelBuilder.Entity("StoreWebApp.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SeasonName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("StoreWebApp.Models.StyleOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("StyleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StyleValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StyleOptions");
                });

            modelBuilder.Entity("StoreWebApp.Models.Usage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UsageName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Usages");
                });

            modelBuilder.Entity("StoreWebApp.Models.ZipCodeData", b =>
                {
                    b.Property<string>("ZipCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryISO")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DstObserved")
                        .HasColumnType("TEXT");

                    b.Property<string>("GmtOffset")
                        .HasColumnType("TEXT");

                    b.Property<string>("GmtOffsetDST")
                        .HasColumnType("TEXT");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Npa")
                        .HasColumnType("TEXT");

                    b.Property<string>("Npanxx")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nxx")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StateISO")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ZipCode");

                    b.ToTable("ZipCodes");
                });

            modelBuilder.Entity("StoreWebApp.Models.Address", b =>
                {
                    b.HasOne("StoreWebApp.Models.ZipCodeData", "ZipCodeData")
                        .WithMany()
                        .HasForeignKey("ZipCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ZipCodeData");
                });

            modelBuilder.Entity("StoreWebApp.Models.Product", b =>
                {
                    b.HasOne("StoreWebApp.Models.AgeGroup", "AgeGroup")
                        .WithMany()
                        .HasForeignKey("AgeGroupId");

                    b.HasOne("StoreWebApp.Models.Category", "ArticleType")
                        .WithMany()
                        .HasForeignKey("ArticleTypeId");

                    b.HasOne("StoreWebApp.Models.Colour", "BaseColour")
                        .WithMany()
                        .HasForeignKey("BaseColourId");

                    b.HasOne("StoreWebApp.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreWebApp.Models.Colour", "Colour1")
                        .WithMany()
                        .HasForeignKey("Colour1Id");

                    b.HasOne("StoreWebApp.Models.Colour", "Colour2")
                        .WithMany()
                        .HasForeignKey("Colour2Id");

                    b.HasOne("StoreWebApp.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreWebApp.Models.Category", "MasterCategory")
                        .WithMany()
                        .HasForeignKey("MasterCategoryId");

                    b.HasOne("StoreWebApp.Models.Purchase", null)
                        .WithMany("Products")
                        .HasForeignKey("PurchaseId");

                    b.HasOne("StoreWebApp.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId");

                    b.HasOne("StoreWebApp.Models.Category", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId");

                    b.HasOne("StoreWebApp.Models.Usage", "Usage")
                        .WithMany()
                        .HasForeignKey("UsageId");

                    b.Navigation("AgeGroup");

                    b.Navigation("ArticleType");

                    b.Navigation("BaseColour");

                    b.Navigation("Brand");

                    b.Navigation("Colour1");

                    b.Navigation("Colour2");

                    b.Navigation("Gender");

                    b.Navigation("MasterCategory");

                    b.Navigation("Season");

                    b.Navigation("SubCategory");

                    b.Navigation("Usage");
                });

            modelBuilder.Entity("StoreWebApp.Models.ProductToStyleOptionJunction", b =>
                {
                    b.HasOne("StoreWebApp.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreWebApp.Models.StyleOption", "StyleOption")
                        .WithMany()
                        .HasForeignKey("StyleOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("StyleOption");
                });

            modelBuilder.Entity("StoreWebApp.Models.Purchase", b =>
                {
                    b.HasOne("StoreWebApp.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("StoreWebApp.Models.PurchaseToProductJunction", b =>
                {
                    b.HasOne("StoreWebApp.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreWebApp.Models.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("StoreWebApp.Models.Purchase", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
