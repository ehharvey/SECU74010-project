@page "/products/{PageNum:int}/{Filter?}"
@using StoreWebApp.Components.Pieces
@using StoreWebApp.Models
@inject Models.IProductRepository ProductRepository
@inject NavigationManager navManager
@rendermode InteractiveServer

<PageTitle>Products</PageTitle>

<h1>Products</h1>
<p>Filter: @Filter</p>
<EditForm Model="@InputData" OnSubmit="@FilterSubmit" FormName="FilterInput">
	<InputText @bind-Value="InputData.FilterString" />
	<button class="btn btn-primary" type="submit">Search</button>
</EditForm>

@if (products != null)
{
    <!-- Flex container for product cards -->
    <div class="d-flex flex-wrap">
        @foreach (var product in products)
        {
            <ProductCard Product=@product />
        }
    </div>

    <StoreWebApp.Components.Pieces.Pagination PageNumber=@PageNum PageSize=20 />
}
else
{
	<p>No products found.</p>
}

@code {
	private IEnumerable<Models.Product>? products;
	[Parameter] public int PageNum { get; set; }
	[Parameter] public string? Filter { get; set; }

	public ProductsInput InputData { get; set; }


	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine("\ninitial load\n");
		try
		{
			InputData = new ProductsInput();
			products = await ProductRepository.GetProductsAsync(PageNum, 20, InputData.FilterString);
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
			products = null;
		}
	}

	public void FilterSubmit()
	{
		Console.WriteLine("\nFilterSubmit");
		Console.WriteLine("Filter: " + Filter);
		Console.WriteLine("InputData: " + InputData.FilterString);

		Filter = InputData.FilterString;
		// navManager.NavigateTo(string.Format("products/0/{0}", InputData.FilterString));

	}

	public class ProductsInput
	{
		public string FilterString { get; set; } = "";
	}
}